{
  "entryPointUrl": "entry.ts",
  "importMapUrl": null,
  "lockFileUrl": null,
  "compilerOptions": null,
  "assets": {
    "entry.ts": {
      "kind": "file",
      "content": "\nimport $createRuntime from \"/~@/@reframe/zero/zero/runtime.ts.~.mjs\";\nimport $createLocalImporter from \"/~@/@reframe/zero/zero/importer/local.ts.~.mjs\";\nimport $path from \"/~@/@reframe/zero/utils/path.ts.~.mjs\";\n\nimport meta from \"./meta.json\" with { type: \"json\" };\n\nconst { createRuntime } = await $createRuntime();\nconst { createLocalImporter } = await $createLocalImporter();\nconst { resolvePath } = await $path();\n\nconst moduleCache = new Map();\n\nconst runtime = createRuntime({\n  entry: meta.entry,\n  org: meta.org,\n  name: meta.name,\n  fs: {},\n  resolve: resolvePath,\n  evaluate: () => {},\n  importer: createLocalImporter(moduleCache, \".~.mjs\"),\n  args: Deno.args,\n  extension: {},\n});\n\nconst { extendRuntime } = await runtime.import(\"/:\" + \"/~@/@/runtime/extension.ts\");\n\nawait extendRuntime(runtime).run(meta.entry);\n",
      "encoding": "utf-8"
    },
    "deno.json": {
      "kind": "file",
      "content": "{\n  \"imports\": {\n    \"/\": \"./\",\n    \"./\": \"./\"\n  }\n}",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/utils/path.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"content-type\": \"application/javascript\",\n  \"x-fs-router\": \"/~@ -> / -> /@reframe/zero/utils/path.ts\",\n  \"x-fs-router-path\": \"/~@/@reframe/zero/utils/path.ts\",\n  \"x-fs-runnable-imports\": \"\",\n  \"x-fs-runnable-dynamic-imports\": \"\",\n  \"x-fs-runnable-exported-names\": \"splitPath,cleanPath,splitSpecifier,joinSpecifier,mergeSpecifiers,normalizeSpecifier,absolute,resolvePath\",\n  \"x-fs-runnable-exported-namespaces\": \"\",\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/~@/@reframe/zero/utils/path.ts\",\n  \"x-fs-local-stat-size\": \"3971\"\n}",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/utils/path.ts.~.mjs": {
      "kind": "file",
      "content": "export default async () => {\n    import.meta.path = \"/@reframe/zero/utils/path.ts\";\n    ;\n    let exports_dt1y8av3kr = {};\n    exports_dt1y8av3kr[Symbol.toStringTag] = \"Module\";\n    const reduceDotDot = (path) => {\n        return path.reduce((slice, p) => {\n            if (p === \"..\" && slice.length > 0 && slice[slice.length - 1] !== \"..\") {\n                slice.pop();\n            }\n            else {\n                slice.push(p);\n            }\n            return slice;\n        }, []);\n    };\n    function splitPath(path) {\n        return reduceDotDot(path\n            .split(/[\\/\\\\]+/g)\n            .filter((p) => p !== \"\" && p !== \".\"));\n    }\n    exports_dt1y8av3kr[\"splitPath\"] = splitPath;\n    function cleanPath(path) {\n        return `/${splitPath(path).join(\"/\")}`;\n    }\n    exports_dt1y8av3kr[\"cleanPath\"] = cleanPath;\n    const splitSpecifier = (specifier) => {\n        // TODO: (transpile:/path/to/loader):file\n        const parts = specifier.split(\":\");\n        const path = parts.pop();\n        const segments = path.split(\"/\").filter(Boolean);\n        while (segments[0]?.startsWith(\"~\")) {\n            parts.push(segments.shift().slice(1));\n        }\n        return {\n            loaders: parts,\n            segments,\n        };\n    };\n    exports_dt1y8av3kr[\"splitSpecifier\"] = splitSpecifier;\n    const joinSpecifier = (loaders, segments) => {\n        return (loaders.length === 0 ? \"\" : loaders.join(\":\") + \":\") +\n            segments.join(\"/\");\n    };\n    exports_dt1y8av3kr[\"joinSpecifier\"] = joinSpecifier;\n    const mergeSpecifiers = (a, b) => {\n        const mergeLoaders = (a, b) => {\n            if (b[0] === \"/\") {\n                return reduceDotDot(b.slice(1));\n            }\n            return reduceDotDot([...a, ...b]);\n        };\n        const mergeSegments = (a, b) => {\n            if (b[0] === \".\" || b[0] === \"..\") {\n                a.pop(); // remove the file name\n                for (const segment of b) {\n                    if (segment === \"..\") {\n                        if (a.length === 0) {\n                            throw new Error(`Invalid specifier: ${b}`);\n                        }\n                        a.pop();\n                    }\n                    else if (segment !== \".\") {\n                        a.push(segment);\n                    }\n                }\n                return a;\n            }\n            return b;\n        };\n        const A = splitSpecifier(a);\n        const B = splitSpecifier(b);\n        return joinSpecifier(mergeLoaders(A.loaders, B.loaders), mergeSegments(A.segments, B.segments));\n    };\n    exports_dt1y8av3kr[\"mergeSpecifiers\"] = mergeSpecifiers;\n    const normalizeSpecifier = (specifier) => {\n        const parts = splitSpecifier(specifier);\n        return joinSpecifier(parts.loaders, parts.segments);\n    };\n    exports_dt1y8av3kr[\"normalizeSpecifier\"] = normalizeSpecifier;\n    const absolute = (specifier) => {\n        if (specifier.startsWith(\".\") || specifier.startsWith(\"/\")) {\n            return absolute(normalizeSpecifier(specifier));\n        }\n        const parts = splitSpecifier(specifier);\n        return cleanPath(\"/\" + parts.loaders.map((l) => \"~\" + l).join(\"/\") + \"/\" +\n            parts.segments.join(\"/\"));\n    };\n    exports_dt1y8av3kr[\"absolute\"] = absolute;\n    const resolvePath = (specifier, referrer) => {\n        if (specifier === \"@\") {\n            return \"@\";\n        }\n        // console.log(\n        //   \"resolvePath\",\n        //   specifier,\n        //   referrer,\n        //   absolute(mergeSpecifiers(referrer, specifier)),\n        // );\n        // TODO: this is a hack, should be fixed with import maps\n        if (specifier === \"react\" || specifier === \"react-dom\") {\n            return resolvePath(specifier + \"@canary\", referrer);\n        }\n        const resolved = absolute(mergeSpecifiers(referrer, specifier));\n        return resolved;\n    };\n    exports_dt1y8av3kr[\"resolvePath\"] = resolvePath;\n    return exports_dt1y8av3kr;\n};\n",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/zero/importer/local.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"content-type\": \"application/javascript\",\n  \"x-fs-router\": \"/~@ -> / -> /@reframe/zero/zero/importer/local.ts\",\n  \"x-fs-router-path\": \"/~@/@reframe/zero/zero/importer/local.ts\",\n  \"x-fs-runnable-imports\": \"\",\n  \"x-fs-runnable-dynamic-imports\": \"\",\n  \"x-fs-runnable-exported-names\": \"createLocalImporter\",\n  \"x-fs-runnable-exported-namespaces\": \"\",\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/~@/@reframe/zero/zero/importer/local.ts\",\n  \"x-fs-local-stat-size\": \"1145\"\n}",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/zero/importer/local.ts.~.mjs": {
      "kind": "file",
      "content": "export default async () => {\n    import.meta.path = \"/@reframe/zero/zero/importer/local.ts\";\n    ;\n    let exports_qjwnx8ae15r = {};\n    exports_qjwnx8ae15r[Symbol.toStringTag] = \"Module\";\n    const createLocalImporter = (moduleCache, importSuffix = \"\") => (runtime) => {\n        return (specifier) => {\n            if (specifier === \"@\") {\n                return Promise.resolve({ default: runtime, __esModule: true });\n            }\n            // todo: throw error on browser\n            if (specifier.startsWith(\"node:\")) {\n                return import(specifier);\n            }\n            const path = runtime.resolve(specifier, runtime.meta.path);\n            if (moduleCache.has(path)) {\n                return moduleCache.get(path);\n            }\n            const runnablePromise = import(path + importSuffix);\n            const modulePromise = runnablePromise.then((moduleFn) => moduleFn.default(runtime.meta.setPath(path)));\n            moduleCache.set(path, modulePromise);\n            return modulePromise;\n        };\n    };\n    exports_qjwnx8ae15r[\"createLocalImporter\"] = createLocalImporter;\n    return exports_qjwnx8ae15r;\n};\n",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/zero/runtime.ts.~.mjs": {
      "kind": "file",
      "content": "export default async () => {\n    import.meta.path = \"/@reframe/zero/zero/runtime.ts\";\n    ;\n    let exports_gn669hw8udl = {};\n    exports_gn669hw8udl[Symbol.toStringTag] = \"Module\";\n    const createRuntime = ({ entry, org, name, path = entry, fs, importer, resolve, evaluate, args, extension, }) => {\n        const runtime = {\n            ...extension,\n            fs,\n            resolve,\n            evaluate,\n            args,\n            meta: {\n                entry,\n                org,\n                name,\n                path,\n                main: true,\n                setPath: (path) => createRuntime({\n                    entry,\n                    org,\n                    name,\n                    path,\n                    fs,\n                    resolve,\n                    evaluate,\n                    importer,\n                    args,\n                    extension,\n                }),\n                setEntry: (path) => createRuntime({\n                    entry: path,\n                    org,\n                    name,\n                    fs,\n                    resolve,\n                    evaluate,\n                    importer,\n                    args,\n                    extension,\n                }),\n            },\n            run: (_path) => {\n                const path = _path ?? runtime.meta.path;\n                console.log(\"running\", path);\n                return runtime.import(\"/:\" + path);\n            },\n            extend: (extension2) => {\n                return createRuntime({\n                    entry,\n                    org,\n                    name,\n                    path,\n                    fs,\n                    resolve,\n                    evaluate,\n                    importer,\n                    args,\n                    extension: { ...extension, ...extension2 },\n                });\n            },\n            import: (specifier) => importer(runtime)(specifier),\n            importMany: async (...paths) => {\n                return Object.fromEntries(await Promise.all(paths.map(async (path) => [\n                    path,\n                    await runtime.import(path),\n                ])));\n            },\n        };\n        return runtime;\n    };\n    exports_gn669hw8udl[\"createRuntime\"] = createRuntime;\n    return exports_gn669hw8udl;\n};\n",
      "encoding": "utf-8"
    },
    "~@/@reframe/zero/zero/runtime.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"content-type\": \"application/javascript\",\n  \"x-fs-router\": \"/~@ -> / -> /@reframe/zero/zero/runtime.ts\",\n  \"x-fs-router-path\": \"/~@/@reframe/zero/zero/runtime.ts\",\n  \"x-fs-runnable-imports\": \"\",\n  \"x-fs-runnable-dynamic-imports\": \"\",\n  \"x-fs-runnable-exported-names\": \"createRuntime\",\n  \"x-fs-runnable-exported-namespaces\": \"\",\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/~@/@reframe/zero/zero/runtime.ts\",\n  \"x-fs-local-stat-size\": \"2316\"\n}",
      "encoding": "utf-8"
    },
    "~@/@/main.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"content-type\": \"application/javascript\",\n  \"x-fs-router\": \"/~@ -> /@ -> /main.ts\",\n  \"x-fs-router-path\": \"/~@/@/main.ts\",\n  \"x-fs-runnable-imports\": \"\",\n  \"x-fs-runnable-dynamic-imports\": \"\",\n  \"x-fs-runnable-exported-names\": \"default\",\n  \"x-fs-runnable-exported-namespaces\": \"\",\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/~@/@/main.ts\",\n  \"x-fs-local-stat-size\": \"427\"\n}",
      "encoding": "utf-8"
    },
    "~@/@/runtime/extension.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"content-type\": \"application/javascript\",\n  \"x-fs-router\": \"/~@ -> /@ -> /runtime/extension.ts\",\n  \"x-fs-router-path\": \"/~@/@/runtime/extension.ts\",\n  \"x-fs-runnable-imports\": \"\",\n  \"x-fs-runnable-dynamic-imports\": \"\",\n  \"x-fs-runnable-exported-names\": \"extendRuntime\",\n  \"x-fs-runnable-exported-namespaces\": \"\",\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/~@/@/runtime/extension.ts\",\n  \"x-fs-local-stat-size\": \"1596\"\n}",
      "encoding": "utf-8"
    },
    "~@/@/runtime/extension.ts.~.mjs": {
      "kind": "file",
      "content": "export default async () => {\n    import.meta.path = \"/@/runtime/extension.ts\";\n    ;\n    let exports_xrz42m20i4 = {};\n    exports_xrz42m20i4[Symbol.toStringTag] = \"Module\";\n    const extendRuntime = (runtime) => {\n        return runtime.extend({\n            hydrate: {\n                server: {\n                    getOnce: (specifier) => {\n                        console.warn(\"getOnce is not implemented\", specifier);\n                        return {\n                            header: () => \"\",\n                            text: async () => {\n                                console.warn(\"text is not implemented\", specifier);\n                                return `export default () => {\n              console.log(\"hydrate.getOnce\", \"${specifier}\");\n            }`;\n                            },\n                        };\n                    },\n                    get: (specifier) => {\n                        console.warn(\"get is not implemented\", specifier);\n                        return {\n                            header: () => \"\",\n                            text: async () => {\n                                console.warn(\"text is not implemented\", specifier);\n                                return `export default () => {\n                  console.log(\"hydrate.get\", \"${specifier}\");\n              }`;\n                            },\n                        };\n                    },\n                    has: (specifier) => false,\n                },\n            },\n        });\n    };\n    exports_xrz42m20i4[\"extendRuntime\"] = extendRuntime;\n    return exports_xrz42m20i4;\n};\n",
      "encoding": "utf-8"
    },
    "~@/@/main.ts.~.mjs": {
      "kind": "file",
      "content": "export default async () => {\n    import.meta.path = \"/@/main.ts\";\n    ;\n    let exports_6n4edv2q8ya = {};\n    exports_6n4edv2q8ya[Symbol.toStringTag] = \"Module\";\n    function serve(request) {\n        return new Response(`Hello from ${request.url}!`, {\n            headers: { \"content-type\": \"text/plain\" },\n        });\n    }\n    exports_6n4edv2q8ya[\"default\"] = serve;\n    Deno.serve(serve);\n    return exports_6n4edv2q8ya;\n};\n",
      "encoding": "utf-8"
    },
    "meta.json.~headers": {
      "kind": "file",
      "content": "{\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/meta.json\",\n  \"x-fs-local-stat-size\": \"108\",\n  \"content-type\": \"application/json\"\n}",
      "encoding": "utf-8"
    },
    "deno.json.~headers": {
      "kind": "file",
      "content": "{\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/deno.json\",\n  \"x-fs-local-stat-size\": \"52\",\n  \"content-type\": \"application/json\"\n}",
      "encoding": "utf-8"
    },
    "entry.ts.~headers": {
      "kind": "file",
      "content": "{\n  \"x-fs-local-cwd\": \"/Users/border/Code/reframe/hub\",\n  \"x-fs-abs-path\": \"/Users/border/Code/reframe/hub/.build/@gates/one/entry.ts\",\n  \"x-fs-local-stat-size\": \"827\",\n  \"content-type\": \"application/javascript\"\n}",
      "encoding": "utf-8"
    },
    "meta.json": {
      "kind": "file",
      "content": "{\n  \"entry\": \"/~@/@/main.ts\",\n  \"org\": \"gates\",\n  \"name\": \"one\",\n  \"path\": \"/~@/@/main.ts\",\n  \"main\": true\n}",
      "encoding": "utf-8"
    }
  },
  "envVars": {
    "MyEnv": "hey"
  },
  "requestTimeout": 10000,
  "description": "no description"
}